MODE            = 'test'
GETHATTACHPOINT = 'ipc:./testchain/geth.ipc'
PASSWORD        = 'testtest'
SOURCEDIR       = '../../contracts'
CROWDSALESOL    = 'SnipCoin.sol'
CROWDSALEJS     = 'SnipCoin.js'
DEPLOYMENTDATA  = 'deploymentData.txt'
INCLUDEJS       = './include.js'
TEST1OUTPUT     = 'test1output.txt'
TEST1RESULTS    = 'test1results.txt'
CURRENTTIME     = '1506229518' 'Sun 24 Sep 2017 05:05:18 UTC'
STARTTIME       = '1506229608' 'Sun 24 Sep 2017 05:06:48 UTC'
ENDTIME         = '1506229698' 'Sun 24 Sep 2017 05:08:18 UTC'
--- Differences ../../contracts/SnipCoin.sol SnipCoin.sol ---
6c6,9
<     function totalSupply() constant returns (uint256 supply) {}
---
>     // function totalSupply() public constant returns (uint supply);
>     // `totalSupply` is defined below because the automatically generated
>     // getter function does not match the abstract function above
>     uint public totalSupply;
10c13
<     function balanceOf(address _owner) constant returns (uint256 );
---
>     function balanceOf(address _owner) public constant returns (uint);
16c19
<     function transfer(address _to, uint256 _value) returns (bool success);
---
>     function transfer(address _to, uint _value) public returns (bool success);
23c26
<     function transferFrom(address _from, address _to, uint256 _value) returns (bool success);
---
>     function transferFrom(address _from, address _to, uint _value) public returns (bool success);
29c32
<     function approve(address _spender, uint256 _value) returns (bool success);
---
>     function approve(address _spender, uint _value) public returns (bool success);
34c37,40
<     function allowance(address _owner, address _spender) constant returns (uint256 remaining);
---
>     function allowance(address _owner, address _spender) public constant returns (uint remaining);
> 
>     event Transfer(address indexed _from, address indexed _to, uint _value);
>     event Approval(address indexed _owner, address indexed _spender, uint _value);
36,38d41
<     event Transfer(address indexed _from, address indexed _to, uint256 _value);
<     event Approval(address indexed _owner, address indexed _spender, uint256 _value);
<     
42,48c45,48
<     
<     function transfer(address _to, uint256 _value) returns (bool success) {
<         //Default assumes totalSupply can't be over max (2^256 - 1).
<         //If your token leaves out totalSupply and can issue more tokens as time goes on, you need to check if it doesn't wrap.
<         //Replace the if with this one instead.
<         //if (balances[msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
<         if (balances[msg.sender] >= _value && _value > 0) {
---
> 
>     function transfer(address _to, uint _value) public returns (bool success) {
>         if (balances[msg.sender] >= _value &&          // Account has sufficient balance
>             balances[_to] + _value >= balances[_to]) { // Overflow check
56,60c56,59
<     function transferFrom(address _from, address _to, uint256 _value) returns (bool success) {
<         //same as above. Replace this line with the following if you want to protect against wrapping uints.
<         //if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && balances[_to] + _value > balances[_to]) {
<         if (balances[_from] >= _value && allowed[_from][msg.sender] >= _value && _value > 0) {
<             balances[_to] += _value;
---
>     function transferFrom(address _from, address _to, uint _value) public returns (bool success) {
>         if (balances[_from] >= _value &&                // Account has sufficient balance
>             allowed[_from][msg.sender] >= _value &&     // Amount has been approved
>             balances[_to] + _value >= balances[_to]) {  // Overflow check
62a62
>             balances[_to] += _value;
68c68
<     function balanceOf(address _owner) constant returns (uint256 balance) {
---
>     function balanceOf(address _owner) public constant returns (uint balance) {
72c72
<     function approve(address _spender, uint256 _value) returns (bool success) {
---
>     function approve(address _spender, uint _value) public returns (bool success) {
78c78
<     function allowance(address _owner, address _spender) constant returns (uint256 remaining) {
---
>     function allowance(address _owner, address _spender) public constant returns (uint remaining) {
82,84c82,83
<     mapping (address => uint256) balances;
<     mapping (address => mapping (address => uint256)) allowed;
<     uint256 public totalSupply;
---
>     mapping (address => uint) balances;
>     mapping (address => mapping (address => uint)) allowed;
90d88
<     /* Public variables of the token */
92,101c90,99
<     string public constant name = "SnipCoin";       // Token name
<     string public symbol = "SNIP";          // Token identifier
<     uint8 public constant decimals = 18;          // Decimal points for token
<     uint public totalEthReceivedInWei; // The total amount of Ether received during the sale in WEI
<     uint public totalUsdReceived; // The total amount of Ether received during the sale in USD terms
<     string public version = "1.0"; // Code version
<     address public saleWalletAddress;  // The wallet address where the Ether from the sale will be stored
<     
<     mapping (address => bool) uncappedBuyerList; // The list of buyers allowed to participate in the sale without a cap
<     mapping (address => bool) cappedBuyerList;   // The list of buyers allowed to participate in the sale
---
>     string public constant name = "SnipCoin";         // Token name
>     string public symbol = "SNIP";                    // Token identifier
>     uint8 public constant decimals = 18;              // Decimal points for token
>     uint public totalEthReceivedInWei;                // The total amount of Ether received during the sale in WEI
>     uint public totalUsdReceived;                     // The total amount of Ether received during the sale in USD terms
>     string public version = "1.0";                    // Code version
>     address public saleWalletAddress;                 // The wallet address where the Ether from the sale will be stored
> 
>     mapping (address => bool) uncappedBuyerList;      // The list of buyers allowed to participate in the sale without a cap
>     mapping (address => bool) cappedBuyerList;        // The list of buyers allowed to participate in the sale
104,107c102,105
<     bool public isSaleOpen = false; // This opens and closes upon external command
<     uint public ethToUsdExchangeRate = 285; // Number of USD in one Eth
<     
<     address private contractOwner;  // Address of the contract owner
---
>     bool public isSaleOpen = false;                   // This opens and closes upon external command
>     uint public ethToUsdExchangeRate = 285;           // Number of USD in one Eth
> 
>     address public contractOwner;                    // Address of the contract owner
109c107,147
<     address private accountWithUpdatePermissions = 0x686f152daD6490DF93B267E319f875A684Bd26e2;
---
>     address public accountWithUpdatePermissions = 0x686f152daD6490DF93B267E319f875A684Bd26e2;
> 
>     uint public constant DECIMALS_MULTIPLIER = 10**uint(decimals);   // Multiplier for the decimals
>     uint public constant SALE_CAP_IN_USD = 8000000;                  // The total sale cap in USD
>     uint public constant MINIMUM_PURCHASE_IN_USD = 50;               // It is impossible to purchase tokens for more than $50 in the sale.
>     uint public constant USD_PURCHASE_AMOUNT_REQUIRING_ID = 4500;    // Above this purchase amount an ID is required.
> 
>     modifier onlyPermissioned() {
>         require((msg.sender == contractOwner) || (msg.sender == accountWithUpdatePermissions));
>         _;
>     }
> 
>     modifier verifySaleNotOver() {
>         require(isSaleOpen);
>         require(totalUsdReceived < SALE_CAP_IN_USD); // Make sure that sale isn't over
>         _;
>     }
> 
>     modifier verifyBuyerCanMakePurchase() {
>         uint purchaseValueInUSD = uint(msg.value / getWeiToUsdExchangeRate()); // The USD worth of tokens sold
> 
>         require(purchaseValueInUSD > MINIMUM_PURCHASE_IN_USD); // Minimum transfer is of $50
> 
>         uint EFFECTIVE_MAX_CAP = SALE_CAP_IN_USD + 1000;  // This allows for the end of the sale by passing $8M and reaching the cap
>         require(EFFECTIVE_MAX_CAP - totalUsdReceived > purchaseValueInUSD); // Make sure that there is enough usd left to buy.
> 
>         if (purchaseValueInUSD >= USD_PURCHASE_AMOUNT_REQUIRING_ID) // Check if buyer is on uncapped white list
>         {
>             require(uncappedBuyerList[msg.sender]);
>         }
>         if (purchaseValueInUSD < USD_PURCHASE_AMOUNT_REQUIRING_ID) // Check if buyer is on capped white list
>         {
>             require(cappedBuyerList[msg.sender] || uncappedBuyerList[msg.sender]);
>         }
>         _;
>     }
> 
>     function SnipCoin() public {
>         initializeSaleWalletAddress();
>         initializeEthReceived();
>         initializeUsdReceived();
111,115c149,153
<     uint private constant DECIMALS_MULTIPLIER = 10**uint(decimals);    // Multiplier for the decimals
<     uint private constant WEI_IN_ETHER = 1000 * 1000 * 1000 * 1000 * 1000 * 1000; // Number of wei in 1 eth
<     uint public constant SALE_CAP_IN_USD = 8000000;  // The total sale cap in USD
<     uint public constant MINIMUM_PURCHASE_IN_USD = 50;  // It is impossible to purchase tokens for more than $50 in the sale.
<     uint public constant USD_PURCHASE_AMOUNT_REQUIRING_ID = 4500;  // Above this purchase amount an ID is required.
---
>         contractOwner = msg.sender;                      // The creator of the contract is its owner
>         totalSupply = 10000000000 * DECIMALS_MULTIPLIER; // In total, 10 billion tokens
>         balances[contractOwner] = totalSupply;           // Initially give owner all of the tokens 
>         Transfer(0x0, contractOwner, totalSupply);
>     }
117,118c155
<     function initializeSaleWalletAddress()
<     {
---
>     function initializeSaleWalletAddress() internal {
122,124c159,160
<     function initializeEthReceived()
<     {
<         totalEthReceivedInWei = 14500 * WEI_IN_ETHER; // Ether received before public sale. Verify this figure before the sale starts.
---
>     function initializeEthReceived() internal {
>         totalEthReceivedInWei = 14500 * 1 ether; // Ether received before public sale. Verify this figure before the sale starts.
127,128c163
<     function initializeUsdReceived()
<     {
---
>     function initializeUsdReceived() internal {
132,133c167
<     function getBalance(address addr) returns(uint)
<     {
---
>     function getBalance(address addr) public constant returns(uint) {
137,139c171,172
<     function getWeiToUsdExchangeRate() returns(uint)
<     {
<         return WEI_IN_ETHER / ethToUsdExchangeRate; // Returns how much Wei one USD is worth
---
>     function getWeiToUsdExchangeRate() public constant returns(uint) {
>         return 1 ether / ethToUsdExchangeRate; // Returns how much Wei one USD is worth
142,144c175
<     function updateEthToUsdExchangeRate(uint newEthToUsdExchangeRate)
<     {
<         require((msg.sender == contractOwner) || (msg.sender == accountWithUpdatePermissions)); // Verify ownership
---
>     function updateEthToUsdExchangeRate(uint newEthToUsdExchangeRate) public onlyPermissioned {
148,150c179
<     function updateSnipCoinToEtherExchangeRate(uint newSnipCoinToEtherExchangeRate)
<     {
<         require((msg.sender == contractOwner) || (msg.sender == accountWithUpdatePermissions)); // Verify ownership
---
>     function updateSnipCoinToEtherExchangeRate(uint newSnipCoinToEtherExchangeRate) public onlyPermissioned {
154,156c183
<     function openOrCloseSale(bool saleCondition)
<     {
<         require((msg.sender == contractOwner) || (msg.sender == accountWithUpdatePermissions)); // Verify ownership
---
>     function openOrCloseSale(bool saleCondition) public onlyPermissioned {
160,162c187
<     function addAddressToCappedAddresses(address addr)
<     {
<         require((msg.sender == contractOwner) || (msg.sender == accountWithUpdatePermissions)); // Verify ownership
---
>     function addAddressToCappedAddresses(address addr) public onlyPermissioned {
166,168c191
<     function addAddressToUncappedAddresses(address addr)
<     {
<         require((msg.sender == contractOwner) || (msg.sender == accountWithUpdatePermissions)); // Verify ownership
---
>     function addAddressToUncappedAddresses(address addr) public onlyPermissioned {
172,211c195,199
<     function SnipCoin()
<     {
<         initializeSaleWalletAddress();
<         initializeEthReceived();
<         initializeUsdReceived();
< 
<         contractOwner = msg.sender; // The creator of the contract is its owner
<         totalSupply = 10000000000 * DECIMALS_MULTIPLIER;      // In total, 10 billion tokens
<         balances[msg.sender] = totalSupply;        // Initially give owner all of the tokens 
<     }
< 
<     function verifySaleNotOver()
<     {
<         require(isSaleOpen);
<         require(totalUsdReceived < SALE_CAP_IN_USD); // Make sure that sale isn't over
<     }
< 
<     function verifyBuyerCanMakePurchase() payable
<     {
<         uint purchaseValueInUSD = uint(msg.value / getWeiToUsdExchangeRate()); // The USD worth of tokens sold
< 
<         require(purchaseValueInUSD > MINIMUM_PURCHASE_IN_USD); // Minimum transfer is of $50
< 
<         uint EFFECTIVE_MAX_CAP = SALE_CAP_IN_USD + 1000;  // This allows for the end of the sale by passing $8M and reaching the cap
<         require(EFFECTIVE_MAX_CAP - totalUsdReceived > purchaseValueInUSD); // Make sure that there is enough usd left to buy.
<         
<         if (purchaseValueInUSD >= USD_PURCHASE_AMOUNT_REQUIRING_ID) // Check if buyer is on uncapped white list
<         {
<             require(uncappedBuyerList[msg.sender]);
<         }
<         if (purchaseValueInUSD < USD_PURCHASE_AMOUNT_REQUIRING_ID) // Check if buyer is on capped white list
<         {
<             require(cappedBuyerList[msg.sender] || uncappedBuyerList[msg.sender]);
<         }
<     }
< 
<     function () payable
<     {
<         verifySaleNotOver();
<         verifyBuyerCanMakePurchase();
---
>     function () public payable verifySaleNotOver verifyBuyerCanMakePurchase {
>         uint tokens = snipCoinToEtherExchangeRate * msg.value / 1 ether;
>         balances[contractOwner] -= tokens;
>         balances[msg.sender] += tokens;
>         Transfer(contractOwner, msg.sender, tokens);
213,214d200
<         saleWalletAddress.transfer(msg.value); // Transfer ether to safe sale address
<         transferFrom(contractOwner, msg.sender, uint(snipCoinToEtherExchangeRate * msg.value / WEI_IN_ETHER)); // Send tokens to buyer according to ratio
216a203,204
> 
>         saleWalletAddress.transfer(msg.value); // Transfer ether to safe sale address
Welcome to the Geth JavaScript console!

instance: Geth/v1.7.0-stable-6c6c7b2a/darwin-amd64/go1.7.1
coinbase: 0xa00af22d07c87d96eeeb0ed583f8f6ac7812827e
at block: 1412 (Sun, 24 Sep 2017 15:05:12 AEST)
 datadir: /Users/bok/Projects/SnipCoinTokenContractAudit/audit/test/testchain
 modules: admin:1.0 debug:1.0 eth:1.0 miner:1.0 net:1.0 personal:1.0 rpc:1.0 txpool:1.0 web3:1.0

> 
true
> 
true
> 
> 
undefined
> 
undefined
> 
> 
undefined
> 
undefined
> 
> 
undefined
> 
RESULT:  # Account                                             EtherBalanceChange                          Token Name
RESULT: -- ------------------------------------------ --------------------------- ------------------------------ ---------------------------
RESULT:  0 0xa00af22d07c87d96eeeb0ed583f8f6ac7812827e       15.000000000000000000           0.00000000 Account #0 - Miner
RESULT:  1 0xa11aae29840fbb5c86e6fd4cf809eba183aef433        0.000000000000000000           0.00000000 Account #1 - Contract Owner
RESULT:  2 0xa22ab8a9d641ce77e06d98b7d7065d324d3d6976        0.000000000000000000           0.00000000 Account #2 - Wallet
RESULT:  3 0xa33a6c312d9ad0e0f2e95541beed0cc081621fd0        0.000000000000000000           0.00000000 Account #3 - Prealloc
RESULT:  4 0xa44a08d3f6933c69212114bb66e2df1813651844        0.000000000000000000           0.00000000 Account #4 - Prealloc
RESULT:  5 0xa55a151eb00fded1634d27d1127b4be4627079ea        0.000000000000000000           0.00000000 Account #5
RESULT:  6 0xa66a85ede0cbe03694aa9d9de0bb19c99ff55bd9        0.000000000000000000           0.00000000 Account #6
RESULT:  7 0xa77a2b9d4b1c010a22a7c565dc418cef683dbcec        0.000000000000000000           0.00000000 Account #7
RESULT:  8 0xa88a05d2b88283ce84c8325760b72a64591279a2        0.000000000000000000           0.00000000 Account #8
RESULT:  9 0xa99a0ae3354c06b1459fd441a32a3f71005d7da0        0.000000000000000000           0.00000000 Account #9 - Vested 1 Tokens
RESULT: 10 0xaaaa9de1e6c564446ebca0fd102d8bd92093c756        0.000000000000000000           0.00000000 Account #10 - Vested 2 Tokens
RESULT: 11 0xABcdEFABcdEFabcdEfAbCdefabcdeFABcDEFabCD        0.000000000000000000           0.00000000 Locked Tokens
RESULT: -- ------------------------------------------ --------------------------- ------------------------------ ---------------------------
RESULT:                                                                                     0.00000000 Total Token Balances
RESULT: -- ------------------------------------------ --------------------------- ------------------------------ ---------------------------
RESULT: 
undefined
> 
RESULT: 
undefined
> 
> 
> 
undefined
> 
undefined
> 
undefined
> 
RESULT: Deploy Crowdsale/Token Contract
undefined
> 
undefined
> 
undefined
> 
undefined
> 
undefined
> 
> 
... 
...... 
......... 
............ 
............ 
............ 
............ 
............ 
............ 
............ 
......... 
...... 
... 
undefined
> 
> 
... 
undefined
> 
> 
DATA: tokenAddress=0x57930444aa5c1e758c1407ded001a8f36aa80b1d
RESULT: tokenAddress=0x57930444aa5c1e758c1407ded001a8f36aa80b1d gas=6000000 gasUsed=1390731 costETH=0.025033158 costUSD=9.52236297162 @ ETH/USD=380.39 gasPrice=18000000000 block=1417 txIx=0 txId=0x344d04a78a362be15cee6b4d12946e23f8b195dbb01ea970f92e9f15b473c2a3
undefined
> 
RESULT:  # Account                                             EtherBalanceChange                          Token Name
RESULT: -- ------------------------------------------ --------------------------- ------------------------------ ---------------------------
RESULT:  0 0xa00af22d07c87d96eeeb0ed583f8f6ac7812827e       25.025033158000000000           0.000000000000000000 Account #0 - Miner
RESULT:  1 0xa11aae29840fbb5c86e6fd4cf809eba183aef433       -0.025033158000000000 10000000000.000000000000000000 Account #1 - Contract Owner
RESULT:  2 0xa22ab8a9d641ce77e06d98b7d7065d324d3d6976        0.000000000000000000           0.000000000000000000 Account #2 - Wallet
RESULT:  3 0xa33a6c312d9ad0e0f2e95541beed0cc081621fd0        0.000000000000000000           0.000000000000000000 Account #3 - Prealloc
RESULT:  4 0xa44a08d3f6933c69212114bb66e2df1813651844        0.000000000000000000           0.000000000000000000 Account #4 - Prealloc
RESULT:  5 0xa55a151eb00fded1634d27d1127b4be4627079ea        0.000000000000000000           0.000000000000000000 Account #5
RESULT:  6 0xa66a85ede0cbe03694aa9d9de0bb19c99ff55bd9        0.000000000000000000           0.000000000000000000 Account #6
RESULT:  7 0xa77a2b9d4b1c010a22a7c565dc418cef683dbcec        0.000000000000000000           0.000000000000000000 Account #7
RESULT:  8 0xa88a05d2b88283ce84c8325760b72a64591279a2        0.000000000000000000           0.000000000000000000 Account #8
RESULT:  9 0xa99a0ae3354c06b1459fd441a32a3f71005d7da0        0.000000000000000000           0.000000000000000000 Account #9 - Vested 1 Tokens
RESULT: 10 0xaaaa9de1e6c564446ebca0fd102d8bd92093c756        0.000000000000000000           0.000000000000000000 Account #10 - Vested 2 Tokens
RESULT: 11 0xABcdEFABcdEFabcdEfAbCdefabcdeFABcDEFabCD        0.000000000000000000           0.000000000000000000 Locked Tokens
RESULT: 12 0x57930444aa5c1e758c1407ded001a8f36aa80b1d        0.000000000000000000           0.000000000000000000 Token 'SNIP' 'SnipCoin'
RESULT: -- ------------------------------------------ --------------------------- ------------------------------ ---------------------------
RESULT:                                                                           10000000000.000000000000000000 Total Token Balances
RESULT: -- ------------------------------------------ --------------------------- ------------------------------ ---------------------------
RESULT: 
undefined
> 
RESULT: PASS Deploy Crowdsale/Token Contract
1
> 
RESULT: tokenContractAddress=0x57930444aa5c1e758c1407ded001a8f36aa80b1d
RESULT: token.totalSupply=10000000000
RESULT: token.name=SnipCoin
RESULT: token.symbol=SNIP
RESULT: token.decimals=18
RESULT: token.totalEthReceivedInWei=14500
RESULT: token.totalUsdReceived=4000000
RESULT: token.version=1.0
RESULT: token.saleWalletAddress=0x686f152dad6490df93b267e319f875a684bd26e2
RESULT: token.snipCoinToEtherExchangeRate=300000
RESULT: token.isSaleOpen=false
RESULT: token.ethToUsdExchangeRate=285
RESULT: token.contractOwner=0xa11aae29840fbb5c86e6fd4cf809eba183aef433
RESULT: token.accountWithUpdatePermissions=0x686f152dad6490df93b267e319f875a684bd26e2
RESULT: token.DECIMALS_MULTIPLIER=1000000000000000000
RESULT: token.SALE_CAP_IN_USD=8000000
RESULT: token.MINIMUM_PURCHASE_IN_USD=50
RESULT: token.USD_PURCHASE_AMOUNT_REQUIRING_ID=4500
RESULT: token.getWeiToUsdExchangeRate=3508771929824561
TypeError: 'OwnershipTransferred' is not a function
    at printTokenContractDetails (functions.js:214:37)
    at <anonymous>:1:1

> 
RESULT: 
undefined
> 
> 
> 
